"""major change to the data base schema:
users: modified email(added index) and added new Field updated_at.

account: modified type(added AccountType enum), user_id(added index), currency(added max length 3 and description) 
and added table args (for uniqueness of the name for a given user) and added new Fields balance, active, created_at, updated_at.

transaction: modified user_id(type to UUID and added index), account_id(added index), amount(type to decimal with precission numeric(18,4)),
currency(added max length 3), category_id (added index), occured_at(added description and index) and added 
new fields merchant, type, transfer_group_id and created_at.

added two new tables categoris and Budgets to the database

Revision ID: 2db139c50cf8
Revises: ff2fb85122b9
Create Date: 2025-09-05 12:44:17.508286

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '2db139c50cf8'
down_revision: Union[str, Sequence[str], None] = 'ff2fb85122b9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()

    account_type = sa.Enum('CASH', 'WALLET', 'BANK', 'CREDIT_CARD', name='accounttype')
    account_type.create(conn, True)

    transaction_type = sa.Enum('INCOME', 'EXPENSE', 'TRANSFER', name='transactiontype')
    transaction_type.create(conn, True)

    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sa.Enum('INCOME', 'EXPENSE', 'BOTH', name='categorytype'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'name', name='uq_category_user_name')
    )
    op.create_index(op.f('ix_categories_user_id'), 'categories', ['user_id'], unique=False)
    op.create_table('budgets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('amount_limit', sa.Numeric(precision=18, scale=4), nullable=False),
    sa.Column('period', sa.Enum('WEEKLY', 'MONTHLY', 'YEARLY', name='budgetperiod'), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_budgets_category_id'), 'budgets', ['category_id'], unique=False)
    op.create_index(op.f('ix_budgets_user_id'), 'budgets', ['user_id'], unique=False)
    op.add_column('account', sa.Column('balance', sa.Numeric(precision=18, scale=4), nullable=False))
    op.add_column('account', sa.Column('active', sa.Boolean(), nullable=False))
    op.add_column('account', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('account', sa.Column('updated_at', sa.DateTime(), nullable=True))

    op.execute("ALTER TABLE account ALTER COLUMN type TYPE accounttype USING type::accounttype")
    
    op.create_index(op.f('ix_account_user_id'), 'account', ['user_id'], unique=False)
    op.create_unique_constraint('uq_account_user_name', 'account', ['user_id', 'name'])
    op.add_column('transactions', sa.Column('merchant', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('transactions', sa.Column('type', transaction_type, nullable=False))
    op.add_column('transactions', sa.Column('transfer_group_id', sa.Uuid(), nullable=True))
    op.add_column('transactions', sa.Column('created_at', sa.DateTime(), nullable=False))

    op.execute("ALTER TABLE transactions ALTER COLUMN user_id TYPE uuid USING user_id::uuid")
    
    op.alter_column('transactions', 'amount',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(precision=18, scale=4),
               existing_nullable=False)
    op.create_index(op.f('ix_transactions_account_id'), 'transactions', ['account_id'], unique=False)
    op.create_index(op.f('ix_transactions_category_id'), 'transactions', ['category_id'], unique=False)
    op.create_index(op.f('ix_transactions_occurred_at'), 'transactions', ['occurred_at'], unique=False)
    op.create_index(op.f('ix_transactions_transfer_group_id'), 'transactions', ['transfer_group_id'], unique=False)
    op.create_index(op.f('ix_transactions_user_id'), 'transactions', ['user_id'], unique=False)
    op.create_foreign_key(None, 'transactions', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'transactions', 'categories', ['category_id'], ['id'])
    op.create_foreign_key(None, 'transactions', 'account', ['account_id'], ['id'])
    op.add_column('users', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.drop_constraint(op.f('uq_users_email'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('uq_users_email'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.drop_column('users', 'updated_at')
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_index(op.f('ix_transactions_user_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_transfer_group_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_occurred_at'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_category_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_account_id'), table_name='transactions')
    op.alter_column('transactions', 'amount',
               existing_type=sa.Numeric(precision=18, scale=4),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=False)
    op.alter_column('transactions', 'user_id',
               existing_type=sa.Uuid(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('transactions', 'created_at')
    op.drop_column('transactions', 'transfer_group_id')
    op.drop_column('transactions', 'type')
    op.drop_column('transactions', 'merchant')
    op.drop_constraint('uq_account_user_name', 'account', type_='unique')
    op.drop_index(op.f('ix_account_user_id'), table_name='account')
    op.alter_column('account', 'type',
               existing_type=sa.Enum('CASH', 'WALLET', 'BANK', 'CREDIT_CARD', name='accounttype'),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('account', 'updated_at')
    op.drop_column('account', 'created_at')
    op.drop_column('account', 'active')
    op.drop_column('account', 'balance')
    op.drop_index(op.f('ix_budgets_user_id'), table_name='budgets')
    op.drop_index(op.f('ix_budgets_category_id'), table_name='budgets')
    op.drop_table('budgets')
    op.drop_index(op.f('ix_categories_user_id'), table_name='categories')
    op.drop_table('categories')
    # ### end Alembic commands ###
